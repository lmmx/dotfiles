# Some of the functions below are aliases, before I found out on some random message board that elaborate aliases are actually bad

# (audio bioinfo chromix gif git medium network scrapped shots)
for bashrc_funcs_file in ~/dotfiles/bashrc/bashrc_functions_*; do
  source $bashrc_funcs_file;
done

# Small aliases and defaults
# ==========================

alias gobuild='go build'
alias gogetv='go get -v'
alias chrome='google-chrome --disable-gpu'
alias foxit='/home/louis/FoxitSoftware/FoxitReader/FoxitReader.sh'
alias grepcol='grep --color=always'
alias python='python3'
alias pep8ify='autopep8 --in-place --aggressive --aggressive'
alias jup-nb='jupyter-notebook'
alias jup-debug='jupyter-notebook >> ~/Desktop/jup.log 2>> ~/Desktop/jup_err.log'
alias weather="curl -4 http://wttr.in/Manchester"
alias runsd='Rscript "$scholaRdaemon/run_daemon"'
alias runsdaemon-debug='Rscript "$scholaRdaemon/run_daemon" --debug'
alias ls='ls --color=auto'
alias less='less -R'
alias s='less -S'
alias clip='xclip -sel clip'
alias tsvshow="column -t -s $'\t'"
alias tsvview='tsvshow | s'
alias recent='ls -ht | head'
alias recentsizes='du -h $(recent)'
alias webcleanclipoverwrite='webcleanclip | xclip -sel clip'
alias c='clear'
alias timenow="date '+%A %X'"
alias addList="paste -sd+ | bc -l"
alias bangq='fc -e : -1 2>/dev/null' # not for internal function use: relies on history list

alias vtmuxconf='vim /home/louis/.tmux.conf'
alias vbashrc='vim /home/louis/.bashrc'
alias bbbash='source /home/louis/.bashrc'
alias tttmuxconf='tmux source-file /home/louis/.tmux.conf'
alias nameserverconf="sudo vim /etc/resolv.conf"

# Handy little helpers
# ====================

function slugname () { echo "$@" | tr ' ' '-' | python -c "import sys; print(sys.stdin.read().lower(), end='')" | tr -d "\n"; }
function slugnamecopy () { echo "$@" | tr ' ' '-' | python -c "import sys; print(sys.stdin.read().lower(), end='')" | tr -d "\n" | xclip -sel clip; }
function file_ends_with_newline() { [[ $(tail -c1 "$1" | wc -l) -gt 0 ]] ; }

# named for ease of bash tab-autocompletion

function cdl () { cd "$1"; ls; }
# function mvcd () { if $# == 2; then mv $1 $2; if ($2 is a directory rather than a rename) cd $2; else get the directory above $2 and cd to that; fi; else echo "Error: number of arguments is not 2" >&2; }
function errecho	(){ >&2 echo "$@"; }
function mdclip	() { pandoc -S "$@" | xclip -t text/html -selection clipboard; }
function cutf		(){ cut -d $'\t' -f "$@"; }
function cuts		(){ cut -d ' ' -f "$@"; }
function findafile	(){ find / -iname "$@" 2>/dev/null; }
function findit		(){ find ./ -iname "$@" 2>/dev/null; }
function findext	(){ find ./ -type f -name "*.$@"; }
function spinfind	(){ findit "$@" | tr -d \\n; }
function spinsys 	(){ spin_systems=$(cd ~/queck; spinfind "$@"); alpha="q⠶$spin_systems" | striptorho $alpha; }
function spinclip	(){ spinfind | xclip -sel clip; }
function howbigis () { du -h "$@"; }
function awkcols { awk -F "\t" '{print NF}' "$@"; }
function expandt { expand -t 20,40,160 "$@"; }
function striptoalpha	(){ for thisitem in $(echo "$@" | tr -dc "[A-Z][a-z]"); do echo $thisitem; done; }
function striptonum	(){ for thisitem in $(echo "$@" | tr -dc "[0-9]"); do echo $thisitem; done; }
function striptorho	(){ for thisword in "$@"; do echo "arg length test"; done; }
function striptolexnum	(){ for thisword in "$@"; do echo "fancy combinatorial parser wooo"; done; }

function neweditr () { editr --new-file "$1"; }
function lastpic () { last-xbel-to-gimp & exit; }
function lastpicshow () { cd ~/Pictures; xdg-open "$(ls -t | head -1)" 2>&1 | sed 's/^.*EOG-WARNING.*load icon.*$//'; cd - 2>&1 >/dev/null; }
function lastpicname () { cd ~/Pictures; ls -t | head -1; cd - 2>&1 >/dev/null; }

function mkcd() { mkdir "$@"; cd "$@"; }

function rgreprecent() {
  for dir in $(ls -dt ./*/); do
    grepped=$(
      cd $dir
      >&2 echo "⇢ "$dir
      grep -r "$@" | sed '/^Binary file/d'
    )
    if [[ ! -z $grepped ]]; then
      echo "$grepped"
    fi
  done
}

function rlgreprecent() {
  for dir in $(ls -dt ./*/); do
    grepped=$(
      cd $dir
      >&2 echo "⇢ "$dir
      grep -lr "$@" | sed '/^Binary file/d' | sed -e "s|^|$dir|"
    )
    if [[ ! -z $grepped ]]; then
      echo "$grepped"
    fi
  done
}

function rgreprecentq () { rgreprecent "$@" 2>/dev/null; }
function rlgreprecentq () { rlgreprecent "$@" 2>/dev/null; }
function rlgreprecentqnoswap () { rlgreprecentq "$@" | sed '/.sw[p|o]$/d'; }

function vimrgreprecent() {
  matched_files=$(rlgreprecentqnoswap "$@" | uniq)
  vim $matched_files
}

function viewrgreprecent() {
  matched_files=$(rlgreprecentqnoswap "$@" | uniq)
  view $matched_files
}

# Ruby-related
# ============

function listgems 	() { gem list "^$@$" --remote --all; }
function listgemsregex	() { gem list "" --remote --all; }

# Go-related
# ==========

# useful for executing Go binaries (same name as working dir.) :
function wdexec() { "./$(basename "$PWD")"; }

# specifically for doing the above after building:
function gomakeitrun { go build; ./*; }

# Jekyll-related
# ==============

function jekgrep () { grep -r "$@" --exclude-dir=\_site; }

# Conda
# ====================
# via https://twitter.com/DrewFustin/status/1171804732920348673

function install_miniconda () {
  wget -O $HOME/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
  bash $HOME/miniconda.sh -b -p $HOME/miniconda
  rm $HOME/miniconda.sh
  . $HOME/miniconda/etc/profile.d/conda.sh
  yes | conda upgrade conda python
  yes | $HOME/miniconda/condabin/conda install flake8 mypy pytest
}

if hash conda 2>/dev/null
  then alias uninstall_miniconda='yes | conda install anaconda-clean; yes | anaconda-clean; rm -rf $HOME/miniconda'
  else alias uninstall_miniconda='rm -rf $HOME/miniconda'
fi
